ACK(1)                            User Contributed Perl Documentation                            ACK(1)

[1mNAME[0m
       ack - grep-like text finder

[1mSYNOPSIS[0m
           ack [options] PATTERN [FILE...]
           ack -f [options] [DIRECTORY...]

[1mDESCRIPTION[0m
       Ack is designed as an alternative to [4mgrep[24m for programmers.

       Ack searches the named input FILEs (or standard input if no files are named, or the file name -
       is given) for lines containing a match to the given PATTERN.  By default, ack prints the
       matching lines.

       PATTERN is a Perl regular expression.  Perl regular expressions are commonly found in other
       programming languages, but for the particulars of their behavior, please consult
       <http://perldoc.perl.org/perlreref.html|perlreref>.  If you don't know how to use regular
       expression but are interested in learning, you may consult
       <http://perldoc.perl.org/perlretut.html|perlretut>.  If you do not need or want ack to use
       regular expressions, please see the "-Q"/"--literal" option.

       Ack can also list files that would be searched, without actually searching them, to let you take
       advantage of ack's file-type filtering capabilities.

[1mFILE SELECTION[0m
       If files are not specified for searching, either on the command line or piped in with the "-x"
       option, [4mack[24m delves into subdirectories selecting files for searching.

       [4mack[24m is intelligent about the files it searches.  It knows about certain file types, based on
       both the extension on the file and, in some cases, the contents of the file.  These selections
       can be made with the [1m--type [22moption.

       With no file selection, [4mack[24m searches through regular files that are not explicitly excluded by
       [1m--ignore-dir [22mand [1m--ignore-file [22moptions, either present in [4mackrc[24m files or on the command line.

       The default options for [4mack[24m ignore certain files and directories.  These include:

       Â·   Backup files: Files matching [4m#*#[24m or ending with [4m~[24m.

       Â·   Coredumps: Files matching [4mcore.\d+[0m

       Â·   Version control directories like [4m.svn[24m and [4m.git[24m.

       Run [4mack[24m with the "--dump" option to see what settings are set.

       However, [4mack[24m always searches the files given on the command line, no matter what type.  If you
       tell [4mack[24m to search in a coredump, it will search in a coredump.

[1mDIRECTORY SELECTION[0m
       [4mack[24m descends through the directory tree of the starting directories specified.  If no
       directories are specified, the current working directory is used.  However, it will ignore the
       shadow directories used by many version control systems, and the build directories used by the
       Perl MakeMaker system.  You may add or remove a directory from this list with the
       [1m--[no]ignore-dir [22moption. The option may be repeated to add/remove multiple directories from the
       ignore list.

       For a complete list of directories that do not get searched, run "ack --dump".

[1mWHEN TO USE GREP[0m
       [4mack[24m trumps [4mgrep[24m as an everyday tool 99% of the time, but don't throw [4mgrep[24m away, because there
       are times you'll still need it.

       E.g., searching through huge files looking for regexes that can be expressed with [4mgrep[24m syntax
       should be quicker with [4mgrep[24m.

       If your script or parent program uses [4mgrep[24m "--quiet" or "--silent" or needs exit 2 on IO error,
       use [4mgrep[24m.

[1mOPTIONS[0m
       [1m--ackrc[0m
           Specifies an ackrc file to load after all others; see "ACKRC LOCATION SEMANTICS".

       [1m-A [4mNUM[24m[22m, [1m--after-context=[4mNUM[0m
           Print [4mNUM[24m lines of trailing context after matching lines.

       [1m-B [4mNUM[24m[22m, [1m--before-context=[4mNUM[0m
           Print [4mNUM[24m lines of leading context before matching lines.

       [1m--[no]break[0m
           Print a break between results from different files. On by default when used interactively.

       [1m-C [[4mNUM[24m][22m, [1m--context[=[4mNUM[24m][0m
           Print [4mNUM[24m lines (default 2) of context around matching lines.

       [1m-c[22m, [1m--count[0m
           Suppress normal output; instead print a count of matching lines for each input file.  If [1m-l[0m
           is in effect, it will only show the number of lines for each file that has lines matching.
           Without [1m-l[22m, some line counts may be zeroes.

           If combined with [1m-h [22m([1m--no-filename[22m) ack outputs only one total count.

       [1m--[no]color[22m, [1m--[no]colour[0m
           [1m--color [22mhighlights the matching text.  [1m--nocolor [22msuppresses the color.  This is on by
           default unless the output is redirected.

           On Windows, this option is off by default unless the Win32::Console::ANSI module is
           installed or the "ACK_PAGER_COLOR" environment variable is used.

       [1m--color-filename=[4mcolor[0m
           Sets the color to be used for filenames.

       [1m--color-match=[4mcolor[0m
           Sets the color to be used for matches.

       [1m--color-lineno=[4mcolor[0m
           Sets the color to be used for line numbers.

       [1m--[no]column[0m
           Show the column number of the first match.  This is helpful for editors that can place your
           cursor at a given position.

       [1m--create-ackrc[0m
           Dumps the default ack options to standard output.  This is useful for when you want to
           customize the defaults.

       [1m--dump[0m
           Writes the list of options loaded and where they came from to standard output.  Handy for
           debugging.

       [1m--[no]env[0m
           [1m--noenv [22mdisables all environment processing. No [4m.ackrc[24m is read and all environment variables
           are ignored. By default, [4mack[24m considers [4m.ackrc[24m and settings in the environment.

       [1m--flush[0m
           [1m--flush [22mflushes output immediately.  This is off by default unless ack is running
           interactively (when output goes to a pipe or file).

       [1m-f  [22mOnly print the files that would be searched, without actually doing any searching.  PATTERN
           must not be specified, or it will be taken as a path to search.

       [1m--files-from=[4mFILE[0m
           The list of files to be searched is specified in [4mFILE[24m.  The list of files are separated by
           newlines.  If [4mFILE[24m is "-", the list is loaded from standard input.

       [1m--[no]filter[0m
           Forces ack to act as if it were receiving input via a pipe.

       [1m--[no]follow[0m
           Follow or don't follow symlinks, other than whatever starting files or directories were
           specified on the command line.

           This is off by default.

       [1m-g [4mPATTERN[0m
           Print files where the relative path + filename matches [4mPATTERN[24m.  This option can be combined
           with [1m--color [22mto make it easier to spot the match.

       [1m--[no]group[0m
           [1m--group [22mgroups matches by file name.  This is the default when used interactively.

           [1m--nogroup [22mprints one result per line, like grep.  This is the default when output is
           redirected.

       [1m-H[22m, [1m--with-filename[0m
           Print the filename for each match. This is the default unless searching a single explicitly
           specified file.

       [1m-h[22m, [1m--no-filename[0m
           Suppress the prefixing of filenames on output when multiple files are searched.

       [1m--[no]heading[0m
           Print a filename heading above each file's results.  This is the default when used
           interactively.

       [1m--help[22m, [1m-?[0m
           Print a short help statement.

       [1m--help-types[22m, [1m--help=types[0m
           Print all known types.

       [1m-i[22m, [1m--ignore-case[0m
           Ignore case distinctions in PATTERN

       [1m--ignore-ack-defaults[0m
           Tells ack to completely ignore the default definitions provided with ack.  This is useful in
           combination with [1m--create-ackrc [22mif you [4mreally[24m want to customize ack.

       [1m--[no]ignore-dir=[4mDIRNAME[24m[22m, [1m--[no]ignore-directory=[4mDIRNAME[0m
           Ignore directory (as CVS, .svn, etc are ignored). May be used multiple times to ignore
           multiple directories. For example, mason users may wish to include [1m--ignore-dir=data[22m. The
           [1m--noignore-dir [22moption allows users to search directories which would normally be ignored
           (perhaps to research the contents of [4m.svn/props[24m directories).

           The [4mDIRNAME[24m must always be a simple directory name. Nested directories like [4mfoo/bar[24m are NOT
           supported. You would need to specify [1m--ignore-dir=foo [22mand then no files from any foo
           directory are taken into account by ack unless given explicitly on the command line.

       [1m--ignore-file=[4mFILTERTYPE:FILTERARGS[0m
           Ignore files matching [4mFILTERTYPE:FILTERARGS[24m.  The filters are specified identically to file
           type filters as seen in "Defining your own types".

       [1m-k[22m, [1m--known-types[0m
           Limit selected files to those with types that ack knows about.  This is equivalent to the
           default behavior found in ack 1.

       [1m--lines=[4mNUM[0m
           Only print line [4mNUM[24m of each file. Multiple lines can be given with multiple [1m--lines [22moptions
           or as a comma separated list ([1m--lines=3,5,7[22m). [1m--lines=4-7 [22malso works. The lines are always
           output in ascending order, no matter the order given on the command line.

       [1m-l[22m, [1m--files-with-matches[0m
           Only print the filenames of matching files, instead of the matching text.

       [1m-L[22m, [1m--files-without-matches[0m
           Only print the filenames of files that do [4mNOT[24m match.

       [1m--match [4mPATTERN[0m
           Specify the [4mPATTERN[24m explicitly. This is helpful if you don't want to put the regex as your
           first argument, e.g. when executing multiple searches over the same set of files.

               # search for foo and bar in given files
               ack file1 t/file* --match foo
               ack file1 t/file* --match bar

       [1m-m=[4mNUM[24m[22m, [1m--max-count=[4mNUM[0m
           Stop reading a file after [4mNUM[24m matches.

       [1m--man[0m
           Print this manual page.

       [1m-n[22m, [1m--no-recurse[0m
           No descending into subdirectories.

       [1m-o  [22mShow only the part of each line matching PATTERN (turns off text highlighting)

       [1m--output=[4mexpr[0m
           Output the evaluation of [4mexpr[24m for each line (turns off text highlighting) If PATTERN matches
           more than once then a line is output for each non-overlapping match.  For more information
           please see the section "Examples of [4m--output[24m".

       [1m--pager=[4mprogram[24m[22m, [1m--nopager[0m
           [1m--pager [22mdirects ack's output through [4mprogram[24m.  This can also be specified via the
           "ACK_PAGER" and "ACK_PAGER_COLOR" environment variables.

           Using --pager does not suppress grouping and coloring like piping output on the command-line
           does.

           [1m--nopager [22mcancels any setting in ~/.ackrc, "ACK_PAGER" or "ACK_PAGER_COLOR".  No output will
           be sent through a pager.

       [1m--passthru[0m
           Prints all lines, whether or not they match the expression.  Highlighting will still work,
           though, so it can be used to highlight matches while still seeing the entire file, as in:

               # Watch a log file, and highlight a certain IP address
               $ tail -f ~/access.log | ack --passthru 123.45.67.89

       [1m--print0[0m
           Only works in conjunction with -f, -g, -l or -c (filename output). The filenames are output
           separated with a null byte instead of the usual newline. This is helpful when dealing with
           filenames that contain whitespace, e.g.

               # remove all files of type html
               ack -f --html --print0 | xargs -0 rm -f

       [1m-Q[22m, [1m--literal[0m
           Quote all metacharacters in PATTERN, it is treated as a literal.

       [1m-r[22m, [1m-R[22m, [1m--recurse[0m
           Recurse into sub-directories. This is the default and just here for compatibility with grep.
           You can also use it for turning [1m--no-recurse [22moff.

       [1m-s  [22mSuppress error messages about nonexistent or unreadable files.  This is taken from fgrep.

       [1m--[no]smart-case[22m, [1m--no-smart-case[0m
           Ignore case in the search strings if PATTERN contains no uppercase characters. This is
           similar to "smartcase" in vim. This option is off by default, and ignored if "-i" is
           specified.

           [1m-i [22malways overrides this option.

       [1m--sort-files[0m
           Sorts the found files lexicographically.  Use this if you want your file listings to be
           deterministic between runs of [4mack[24m.

       [1m--show-types[0m
           Outputs the filetypes that ack associates with each file.

           Works with [1m-f [22mand [1m-g [22moptions.

       [1m--type=[no]TYPE[0m
           Specify the types of files to include or exclude from a search.  TYPE is a filetype, like
           [4mperl[24m or [4mxml[24m.  [1m--type=perl [22mcan also be specified as [1m--perl[22m, and [1m--type=noperl [22mcan be done as
           [1m--noperl[22m.

           If a file is of both type "foo" and "bar", specifying --foo and --nobar will exclude the
           file, because an exclusion takes precedence over an inclusion.

           Type specifications can be repeated and are ORed together.

           See [4mack[24m [4m--help=types[24m for a list of valid types.

       [1m--type-add [4mTYPE[24m:[4mFILTER[24m:[4mFILTERARGS[0m
           Files with the given FILTERARGS applied to the given FILTER are recognized as being of (the
           existing) type TYPE.  See also "Defining your own types".

       [1m--type-set [4mTYPE[24m:[4mFILTER[24m:[4mFILTERARGS[0m
           Files with the given FILTERARGS applied to the given FILTER are recognized as being of type
           TYPE. This replaces an existing definition for type TYPE.  See also "Defining your own
           types".

       [1m--type-del [4mTYPE[0m
           The filters associated with TYPE are removed from Ack, and are no longer considered for
           searches.

       [1m-v[22m, [1m--invert-match[0m
           Invert match: select non-matching lines

       [1m--version[0m
           Display version and copyright information.

       [1m-w[22m, [1m--word-regexp[0m
           Force PATTERN to match only whole words.  The PATTERN is wrapped with "\b" metacharacters.

       [1m-x  [22mAn abbreviation for [1m--files-from=-[22m; the list of files to search are read from standard
           input, with one line per file.

       [1m-1  [22mStops after reporting first match of any kind.  This is different from [1m--max-count=1 [22mor [1m-m1[22m,
           where only one match per file is shown.  Also, [1m-1 [22mworks with [1m-f [22mand [1m-g[22m, where [1m-m [22mdoes not.

       [1m--thpppt[0m
           Display the all-important Bill The Cat logo.  Note that the exact spelling of [1m--thpppppt [22mis
           not important.  It's checked against a regular expression.

       [1m--bar[0m
           Check with the admiral for traps.

       [1m--cathy[0m
           Chocolate, Chocolate, Chocolate!

[1mTHE .ackrc FILE[0m
       The [4m.ackrc[24m file contains command-line options that are prepended to the command line before
       processing.  Multiple options may live on multiple lines.  Lines beginning with a # are ignored.
       A [4m.ackrc[24m might look like this:

           # Always sort the files
           --sort-files

           # Always color, even if piping to a another program
           --color

           # Use "less -r" as my pager
           --pager=less -r

       Note that arguments with spaces in them do not need to be quoted, as they are not interpreted by
       the shell. Basically, each [4mline[24m in the [4m.ackrc[24m file is interpreted as one element of @ARGV.

       [4mack[24m looks in several locations for [4m.ackrc[24m files; the searching process is detailed in "ACKRC
       LOCATION SEMANTICS".  These files are not considered if [1m--noenv [22mis specified on the command
       line.

[1mDefining your own types[0m
       ack allows you to define your own types in addition to the predefined types. This is done with
       command line options that are best put into an [4m.ackrc[24m file - then you do not have to define your
       types over and over again. In the following examples the options will always be shown on one
       command line so that they can be easily copy & pasted.

       [4mack[24m [4m--perl[24m [4mfoo[24m searches for foo in all perl files. [4mack[24m [4m--help=types[24m tells you, that perl files
       are files ending in .pl, .pm, .pod or .t. So what if you would like to include .xs files as well
       when searching for --perl files? [4mack[24m [4m--type-add[24m [4mperl:ext:xs[24m [4m--perl[24m [4mfoo[24m does this for you.
       [1m--type-add [22mappends additional extensions to an existing type.

       If you want to define a new type, or completely redefine an existing type, then use [1m--type-set[22m.
       [4mack[24m [4m--type-set[24m [4meiffel:ext:e,eiffel[24m defines the type [4meiffel[24m to include files with the extensions
       .e or .eiffel. So to search for all eiffel files containing the word Bertrand use [4mack[24m [4m--type-set[0m
       [4meiffel:ext:e,eiffel[24m [4m--eiffel[24m [4mBertrand[24m.  As usual, you can also write [1m--type=eiffel [22minstead of
       [1m--eiffel[22m. Negation also works, so [1m--noeiffel [22mexcludes all eiffel files from a search. Redefining
       also works: [4mack[24m [4m--type-set[24m [4mcc:ext:c,h[24m and [4m.xs[24m files no longer belong to the type [4mcc[24m.

       When defining your own types in the [4m.ackrc[24m file you have to use the following:

         --type-set=eiffel:ext:e,eiffel

       or writing on separate lines

         --type-set
         eiffel:ext:e,eiffel

       The following does [1mNOT [22mwork in the [4m.ackrc[24m file:

         --type-set eiffel:ext:e,eiffel

       In order to see all currently defined types, use [4m--help-types[24m, e.g.  [4mack[24m [4m--type-set[0m
       [4mbackup:ext:bak[24m [4m--type-add[24m [4mperl:ext:perl[24m [4m--help-types[0m

       In addition to filtering based on extension (like ack 1.x allowed), ack 2 offers additional
       filter types.  The generic syntax is [4m--type-set[24m [4mTYPE:FILTER:FILTERARGS[24m; [4mFILTERARGS[24m depends on
       the value of [4mFILTER[24m.

       is:[4mFILENAME[0m
           [4mis[24m filters match the target filename exactly.  It takes exactly one argument, which is the
           name of the file to match.

           Example:

               --type-set make:is:Makefile

       ext:[4mEXTENSION[24m[,[4mEXTENSION2[24m[,...]]
           [4mext[24m filters match the extension of the target file against a list of extensions.  No leading
           dot is needed for the extensions.

           Example:

               --type-set perl:ext:pl,pm,t

       match:[4mPATTERN[0m
           [4mmatch[24m filters match the target filename against a regular expression.  The regular
           expression is made case insensitive for the search.

           Example:

               --type-set make:match:/(gnu)?makefile/

       firstlinematch:[4mPATTERN[0m
           [4mfirstlinematch[24m matches the first line of the target file against a regular expression.  Like
           [4mmatch[24m, the regular expression is made case insensitive.

           Example:

               --type-add perl:firstlinematch:/perl/

       More filter types may be made available in the future.

[1mENVIRONMENT VARIABLES[0m
       For commonly-used ack options, environment variables can make life much easier.  These variables
       are ignored if [1m--noenv [22mis specified on the command line.

       ACKRC
           Specifies the location of the user's [4m.ackrc[24m file.  If this file doesn't exist, [4mack[24m looks in
           the default location.

       ACK_OPTIONS
           This variable specifies default options to be placed in front of any explicit options on the
           command line.

       ACK_COLOR_FILENAME
           Specifies the color of the filename when it's printed in [1m--group [22mmode.  By default, it's
           "bold green".

           The recognized attributes are clear, reset, dark, bold, underline, underscore, blink,
           reverse, concealed black, red, green, yellow, blue, magenta, on_black, on_red, on_green,
           on_yellow, on_blue, on_magenta, on_cyan, and on_white.  Case is not significant.  Underline
           and underscore are equivalent, as are clear and reset.  The color alone sets the foreground
           color, and on_color sets the background color.

           This option can also be set with [1m--color-filename[22m.

       ACK_COLOR_MATCH
           Specifies the color of the matching text when printed in [1m--color [22mmode.  By default, it's
           "black on_yellow".

           This option can also be set with [1m--color-match[22m.

           See [1mACK_COLOR_FILENAME [22mfor the color specifications.

       ACK_COLOR_LINENO
           Specifies the color of the line number when printed in [1m--color [22mmode.  By default, it's "bold
           yellow".

           This option can also be set with [1m--color-lineno[22m.

           See [1mACK_COLOR_FILENAME [22mfor the color specifications.

       ACK_PAGER
           Specifies a pager program, such as "more", "less" or "most", to which ack will send its
           output.

           Using "ACK_PAGER" does not suppress grouping and coloring like piping output on the command-
           line does, except that on Windows ack will assume that "ACK_PAGER" does not support color.

           "ACK_PAGER_COLOR" overrides "ACK_PAGER" if both are specified.

       ACK_PAGER_COLOR
           Specifies a pager program that understands ANSI color sequences.  Using "ACK_PAGER_COLOR"
           does not suppress grouping and coloring like piping output on the command-line does.

           If you are not on Windows, you never need to use "ACK_PAGER_COLOR".

[1mAVAILABLE COLORS[0m
       [4mack[24m uses the colors available in Perl's Term::ANSIColor module, which provides the following
       listed values. Note that case does not matter when using these values.

   [1mForeground colors[0m
           black  red  green  yellow  blue  magenta  cyan  white

           bright_black  bright_red      bright_green  bright_yellow
           bright_blue   bright_magenta  bright_cyan   bright_white

   [1mBackground colors[0m
           on_black  on_red      on_green  on_yellow
           on_blue   on_magenta  on_cyan   on_white

           on_bright_black  on_bright_red      on_bright_green  on_bright_yellow
           on_bright_blue   on_bright_magenta  on_bright_cyan   on_bright_white

[1mACK & OTHER TOOLS[0m
   [1mVim integration[0m
       [4mack[24m integrates easily with the Vim text editor. Set this in your [4m.vimrc[24m to use [4mack[24m instead of
       [4mgrep[24m:

           set grepprg=ack\ -k

       That example uses "-k" to search through only files of the types ack knows about, but you may
       use other default flags. Now you can search with [4mack[24m and easily step through the results in Vim:

         :grep Dumper perllib

       Miles Sterrett has written a Vim plugin for [4mack[24m which allows you to use ":Ack" instead of
       ":grep", as well as several other advanced features.

       <https://github.com/mileszs/ack.vim>

   [1mEmacs integration[0m
       Phil Jackson put together an [4mack.el[24m extension that "provides a simple compilation mode ... has
       the ability to guess what files you want to search for based on the major-mode."

       <http://www.shellarchive.co.uk/content/emacs.html>

   [1mTextMate integration[0m
       Pedro Melo is a TextMate user who writes "I spend my day mostly inside TextMate, and the built-
       in find-in-project sucks with large projects.  So I hacked a TextMate command that was using
       find + grep to use ack.  The result is the Search in Project with ack, and you can find it here:
       <http://www.simplicidade.org/notes/archives/2008/03/search_in_proje.html>"

   [1mShell and Return Code[0m
       For greater compatibility with [4mgrep[24m, [4mack[24m in normal use returns shell return or exit code of 0
       only if something is found and 1 if no match is found.

       (Shell exit code 1 is "$?=256" in perl with "system" or backticks.)

       The [4mgrep[24m code 2 for errors is not used.

       If "-f" or "-g" are specified, then 0 is returned if at least one file is found.  If no files
       are found, then 1 is returned.

[1mDEBUGGING ACK PROBLEMS[0m
       If ack gives you output you're not expecting, start with a few simple steps.

   [1mUse --noenv[0m
       Your environment variables and [4m.ackrc[24m may be doing things you're not expecting, or forgotten you
       specified.  Use [1m--noenv [22mto ignore your environment and [4m.ackrc[24m.

   [1mUse -f to see what files have been selected[0m
       Ack's [1m-f [22mwas originally added as a debugging tool.  If ack is not finding matches you think it
       should find, run [4mack[24m [4m-f[24m to see what files have been selected.  You can also add the
       "--show-types" options to show the type of each file selected.

   [1mUse --dump[0m
       This lists the ackrc files that are loaded and the options loaded from them.  So for example you
       can find a list of directories that do not get searched or where filetypes are defined.

[1mTIPS[0m
   [1mUse the [4m[22m.ackrc[24m [1mfile.[0m
       The [4m.ackrc[24m is the place to put all your options you use most of the time but don't want to
       remember.  Put all your --type-add and --type-set definitions in it.  If you like --smart-case,
       set it there, too.  I also set --sort-files there.

   [1mUse [4m[22m-f[24m [1mfor working with big codesets[0m
       Ack does more than search files.  "ack -f --perl" will create a list of all the Perl files in a
       tree, ideal for sending into [4mxargs[24m.  For example:

           # Change all "this" to "that" in all Perl files in a tree.
           ack -f --perl | xargs perl -p -i -e's/this/that/g'

       or if you prefer:

           perl -p -i -e's/this/that/g' $(ack -f --perl)

   [1mUse [4m[22m-Q[24m [1mwhen in doubt about metacharacters[0m
       If you're searching for something with a regular expression metacharacter, most often a period
       in a filename or IP address, add the -Q to avoid false positives without all the backslashing.
       See the following example for more...

   [1mUse ack to watch log files[0m
       Here's one I used the other day to find trouble spots for a website visitor.  The user had a
       problem loading [4mtroublesome.gif[24m, so I took the access log and scanned it with ack twice.

           ack -Q aa.bb.cc.dd /path/to/access.log | ack -Q -B5 troublesome.gif

       The first ack finds only the lines in the Apache log for the given IP.  The second finds the
       match on my troublesome GIF, and shows the previous five lines from the log in each case.

   [1mExamples of [4m[22m--output[0m
       Following variables are useful in the expansion string:

       $&  The whole string matched by PATTERN.

       $1, $2, ...
           The contents of the 1st, 2nd ... bracketed group in PATTERN.

       "$`"
           The string before the match.

       "$'"
           The string after the match.

       For more details and other variables see
       <http://perldoc.perl.org/perlvar.html#Variables-related-to-regular-expressions|perlvar>.

       This example shows how to add text around a particular pattern (in this case adding _ around
       word with "e")

           ack2.pl "\w*e\w*" quick.txt --output="$`_$&_$'"
           _The_ quick brown fox jumps over the lazy dog
           The quick brown fox jumps _over_ the lazy dog
           The quick brown fox jumps over _the_ lazy dog

       This shows how to pick out particular parts of a match using ( ) within regular expression.

         ack '=head(\d+)\s+(.*)' --output=' $1 : $2'
         input file contains "=head1 NAME"
         output  "1 : NAME"

   [1mShare your knowledge[0m
       Join the ack-users mailing list.  Send me your tips and I may add them here.

[1mFAQ[0m
   [1mWhy isn't ack finding a match in (some file)?[0m
       Probably because it's of a type that ack doesn't recognize.  ack's searching behavior is driven
       by filetype.  [1mIf ack doesn't know what kind of file it is, ack ignores the file.[0m

       Use the "-f" switch to see a list of files that ack will search for you.  You can use the
       "--show-types" switch to show which type ack thinks each file is.

   [1mWouldn't it be great if [4m[22mack[24m [1mdid search & replace?[0m
       No, ack will always be read-only.  Perl has a perfectly good way to do search & replace in
       files, using the "-i", "-p" and "-n" switches.

       You can certainly use ack to select your files to update.  For example, to change all "foo" to
       "bar" in all PHP files, you can do this from the Unix shell:

           $ perl -i -p -e's/foo/bar/g' $(ack -f --php)

   [1mCan I make ack recognize [4m[22m.xyz[24m [1mfiles?[0m
       Yes!  Please see "Defining your own types".  If you think that [4mack[24m should recognize a type by
       default, please see "ENHANCEMENTS".

   [1mThere's already a program/package called ack.[0m
       Yes, I know.

   [1mWhy is it called ack if it's called ack-grep?[0m
       The name of the program is "ack".  Some packagers have called it "ack-grep" when creating
       packages because there's already a package out there called "ack" that has nothing to do with
       this ack.

       I suggest you make a symlink named [4mack[24m that points to [4mack-grep[24m because one of the crucial
       benefits of ack is having a name that's so short and simple to type.

       To do that, run this with [4msudo[24m or as root:

          ln -s /usr/bin/ack-grep /usr/bin/ack

       Alternatively, you could use a shell alias:

           # bash/zsh
           alias ack=ack-grep

           # csh
           alias ack ack-grep

   [1mWhat does [4m[22mack[24m [1mmean?[0m
       Nothing.  I wanted a name that was easy to type and that you could pronounce as a single
       syllable.

   [1mCan I do multi-line regexes?[0m
       No, ack does not support regexes that match multiple lines.  Doing so would require reading in
       the entire file at a time.

       If you want to see lines near your match, use the "--A", "--B" and "--C" switches for displaying
       context.

   [1mWhy is ack telling me I have an invalid option when searching for "+foo"?[0m
       ack treats command line options beginning with "+" or "-" as options; if you would like to
       search for these, you may prefix your search term with "--" or use the "--match" option.
       (However, don't forget that "+" is a regular expression metacharacter!)

   [1mWhy does "ack '.{40000,}'" fail?  Isn't that a valid regex?[0m
       The Perl language limits the repetition quanitifier to 32K.  You can search for ".{32767}" but
       not ".{32768}".

[1mACKRC LOCATION SEMANTICS[0m
       Ack can load its configuration from many sources.  This list specifies the sources Ack looks for
       configuration; each one that is found is loaded in the order specified here, and each one
       overrides options set in any of the sources preceding it.  (For example, if I set --sort-files
       in my user ackrc, and --nosort-files on the command line, the command line takes precedence)

       Â·   Defaults are loaded from App::Ack::ConfigDefaults.  This can be omitted using
           "--ignore-ack-defaults".

       Â·   Global ackrc

           Options are then loaded from the global ackrc.  This is located at "/etc/ackrc" on Unix-like
           systems.

           Under Windows XP and earlier, the ackrc is at "C:\Documents and Settings\All
           Users\Application Data\ackrc".

           Under Windows Vista/7, the global ackrc is at "C:\ProgramData"

           The "--noenv" option prevents all ackrc files from being loaded.

       Â·   User ackrc

           Options are then loaded from the user's ackrc.  This is located at "$HOME/.ackrc" on Unix-
           like systems.

           Under Windows XP and earlier, the user's ackrc is at "C:\Documents and
           Settings\$USER\Application Data\ackrc".

           Under Windows Vista/7, the user's ackrc is at <C:\Users\$USER\AppData\Roaming>.

           If you want to load a different user-level ackrc, it may be specified with the $ACKRC
           environment variable.

           The "--noenv" option prevents all ackrc files from being loaded.

       Â·   Project ackrc

           Options are then loaded from the project ackrc.  The project ackrc is the first ackrc file
           with the name ".ackrc" or "_ackrc", first searching in the current directory, then the
           parent directory, then the grandparent directory, etc.  This can be omitted using "--noenv".

       Â·   --ackrc

           The "--ackrc" option may be included on the command line to specify an ackrc file that can
           override all others.  It is consulted even if "--noenv" is present.

       Â·   ACK_OPTIONS

           Options are then loaded from the environment variable "ACK_OPTIONS".  This can be omitted
           using "--noenv".

       Â·   Command line

           Options are then loaded from the command line.

[1mDIFFERENCES BETWEEN ACK 1.X AND ACK 2.X[0m
       A lot of changes were made for ack 2; here is a list of them.

   [1mGENERAL CHANGES[0m
       Â·   When no selectors are specified, ack 1.x only searches through files that it can map to a
           file type.  ack 2.x, by contrast, will search through every regular, non-binary file that is
           not explicitly ignored via [1m--ignore-file [22mor [1m--ignore-dir[22m.  This is similar to the behavior
           of the [1m-a/--all [22moption in ack 1.x.

       Â·   A more flexible filter system has been added, so that more powerful file types may be
           created by the user.  For details, please consult "Defining your own types".

       Â·   ack now loads multiple ackrc files; see "ACKRC LOCATION SEMANTICS" for details.

       Â·   ack's default filter definitions aren't special; you may tell ack to completely disregard
           them if you don't like them.

   [1mREMOVED OPTIONS[0m
       Â·   Because of the change in default search behavior, the [1m-a/--all [22mand [1m-u/--unrestricted [22moptions
           have been removed.  In addition, the [1m-k/--known-types [22moption was added to cause ack to
           behave with the default search behavior of ack 1.x.

       Â·   The [1m-G [22moption has been removed.  Two regular expressions on the command line was considered
           too confusing; to simulate [1m-G[22m's functionality, you may use the new [1m-x [22moption to pipe
           filenames from one invocation of ack into another.

       Â·   The [1m--binary [22moption has been removed.

       Â·   The [1m--skipped [22moption has been removed.

       Â·   The [1m--text [22moption has been removed.

       Â·   The [1m--invert-file-match [22moption has been removed.  Instead, you may use [1m-v [22mwith [1m-g[22m.

   [1mCHANGED OPTIONS[0m
       Â·   The options that modify the regular expression's behavior ([1m-i[22m, [1m-w[22m, [1m-Q[22m, and [1m-v[22m) may now be
           used with [1m-g[22m.

   [1mADDED OPTIONS[0m
       Â·   [1m--files-from [22mwas added so that a user may submit a list of filenames as a list of files to
           search.

       Â·   [1m-x [22mwas added to tell ack to accept a list of filenames via standard input; this list is the
           list of filenames that will be used for the search.

       Â·   [1m-s [22mwas added to tell ack to suppress error messages about non-existent or unreadable files.

       Â·   [1m--ignore-directory [22mand [1m--noignore-directory [22mwere added as aliases for [1m--ignore-dir [22mand
           [1m--noignore-dir [22mrespectively.

       Â·   [1m--ignore-file [22mwas added so that users may specify patterns of files to ignore (ex. /.*~$/).

       Â·   [1m--dump [22mwas added to allow users to easily find out which options are set where.

       Â·   [1m--create-ackrc [22mwas added so that users may create custom ackrc files based on the default
           settings loaded by ack, and so that users may easily view those defaults.

       Â·   [1m--type-del [22mwas added to selectively remove file type definitions.

       Â·   [1m--ignore-ack-defaults [22mwas added so that users may ignore ack's default options in favor of
           their own.

       Â·   [1m--bar [22mwas added so ack users may consult Admiral Ackbar.

[1mAUTHOR[0m
       Andy Lester, "<andy at petdance.com>"

[1mBUGS[0m
       Please report any bugs or feature requests to the issues list at Github:
       <https://github.com/petdance/ack2/issues>

[1mENHANCEMENTS[0m
       All enhancement requests MUST first be posted to the ack-users mailing list at
       <http://groups.google.com/group/ack-users>.  I will not consider a request without it first
       getting seen by other ack users.  This includes requests for new filetypes.

       There is a list of enhancements I want to make to [4mack[24m in the ack issues list at Github:
       <https://github.com/petdance/ack2/issues>

       Patches are always welcome, but patches with tests get the most attention.

[1mSUPPORT[0m
       Support for and information about [4mack[24m can be found at:

       Â·   The ack homepage

           <http://beyondgrep.com/>

       Â·   The ack-users mailing list

           <http://groups.google.com/group/ack-users>

       Â·   The ack issues list at Github

           <https://github.com/petdance/ack2/issues>

       Â·   AnnoCPAN: Annotated CPAN documentation

           <http://annocpan.org/dist/ack>

       Â·   CPAN Ratings

           <http://cpanratings.perl.org/d/ack>

       Â·   Search CPAN

           <http://search.cpan.org/dist/ack>

       Â·   Git source repository

           <https://github.com/petdance/ack2>

[1mACKNOWLEDGEMENTS[0m
       How appropriate to have [4mack[24mnowledgements!

       Thanks to everyone who has contributed to ack in any way, including Stephen Thirlwall, Jonah
       Bishop, Chris Rebert, Denis Howe, RaÃºl GundÃ­n, James McCoy, Daniel Perrett, Steven Lee, Jonathan
       Perret, Fraser Tweedale, RaÃ¡l GundÃ¡n, Steffen Jaeckel, Stephan Hohe, Michael Beijen, Alexandr
       Ciornii, Christian Walde, Charles Lee, Joe McMahon, John Warwick, David Steinbrunner, Kara
       Martens, Volodymyr Medvid, Ron Savage, Konrad Borowski, Dale Sedivic, Michael McClimon, Andrew
       Black, Ralph Bodenner, Shaun Patterson, Ryan Olson, Shlomi Fish, Karen Etheridge, Olivier
       Mengue, Matthew Wild, Scott Kyle, Nick Hooey, Bo Borgerson, Mark Szymanski, Marq Schneider,
       Packy Anderson, JR Boyens, Dan Sully, Ryan Niebur, Kent Fredric, Mike Morearty, Ingmar
       Vanhassel, Eric Van Dewoestine, Sitaram Chamarty, Adam James, Richard Carlsson, Pedro Melo, AJ
       Schuster, Phil Jackson, Michael Schwern, Jan Dubois, Christopher J. Madsen, Matthew Wickline,
       David Dyck, Jason Porritt, Jjgod Jiang, Thomas Klausner, Uri Guttman, Peter Lewis, Kevin Riggle,
       Ori Avtalion, Torsten Blix, Nigel Metheringham, GÃ¡bor SzabÃ³, Tod Hagan, Michael Hendricks, Ãvar
       ArnfjÃ¶rÃ° Bjarmason, Piers Cawley, Stephen Steneker, Elias Lutfallah, Mark Leighton Fisher, Matt
       Diephouse, Christian Jaeger, Bill Sully, Bill Ricker, David Golden, Nilson Santos F. Jr, Elliot
       Shank, Merijn Broeren, Uwe Voelker, Rick Scott, Ask BjÃ¸rn Hansen, Jerry Gay, Will Coleda, Mike
       O'Regan, Slaven ReziÄ, Mark Stosberg, David Alan Pisoni, Adriano Ferreira, James Keenan, Leland
       Johnson, Ricardo Signes, Pete Krawczyk and Rob Hoelz.

[1mCOPYRIGHT & LICENSE[0m
       Copyright 2005-2014 Andy Lester.

       This program is free software; you can redistribute it and/or modify it under the terms of the
       Artistic License v2.0.

       See http://www.perlfoundation.org/artistic_license_2_0 or the LICENSE.md file that comes with
       the ack distribution.

perl v5.22.1                                   2014-09-04                                        ACK(1)
